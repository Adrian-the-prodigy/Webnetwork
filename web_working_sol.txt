import pygame
import requests
import networkx as nx
from datetime import datetime
import time

# Window size and color constants
WIDTH, HEIGHT = 1200, 800
NODE_COLOR = (0, 255, 255)           # Cyan node color
EDGE_COLOR = (100, 255, 100)         # Light green edges
FONT_COLOR = (240, 240, 240)         # Light gray text
BG_COLOR = (10, 10, 20)              # Dark background
GLOW_COLOR = (0, 255, 180)           # Bright glow accent color

# Solana RPC endpoint using the Helius API
API_KEY = "d864af0a-7b5f-45bd-9643-96725d97ed69"
RPC_URL = f"https://mainnet.helius-rpc.com/?api-key={API_KEY}"

# Global state variables used across functions
node_transactions = {}              # Dictionary to store transactions per node
selected_node = None                # Currently clicked node
selected_transactions = []          # Transactions related to clicked node
show_credit = False                 # Toggle flag for credit score panel

def fetch_transactions(wallet_address, limit=50):
    """
    Fetch recent transactions for a Solana wallet using Helius API.
    Returns a list of tuples: (sender, recipient, label)
    """
    headers = {"Content-Type": "application/json"}

    # Step 1: Fetch recent transaction signatures for the wallet
    sig_payload = {
        "jsonrpc": "2.0",
        "id": 1,
        "method": "getSignaturesForAddress",
        "params": [wallet_address, {"limit": limit}]
    }
    sig_response = requests.post(RPC_URL, headers=headers, json=sig_payload)
    if sig_response.status_code != 200:
        return []

    signature_data = sig_response.json().get("result", [])
    transactions = []

    # Step 2: For each signature, fetch full transaction details
    for entry in signature_data:
        sig = entry["signature"]
        block_time = entry.get("blockTime")

        tx_payload = {
            "jsonrpc": "2.0",
            "id": 1,
            "method": "getTransaction",
            "params": [sig, "jsonParsed"]
        }

        tx_response = requests.post(RPC_URL, headers=headers, json=tx_payload)
        if tx_response.status_code != 200:
            continue

        tx_data = tx_response.json().get("result", {})
        if not tx_data:
            continue

        # Get block time or fallback
        if not block_time:
            block_time = tx_data.get("blockTime")
        dt_str = datetime.utcfromtimestamp(block_time).strftime("%Y-%m-%d %H:%M:%S") if block_time else "unknown"

        # Step 3: Parse transfer instructions (skip others)
        instructions = tx_data.get("transaction", {}).get("message", {}).get("instructions", [])
        for instr in instructions:
            parsed = instr.get("parsed", {})
            if isinstance(parsed, dict) and parsed.get("type") == "transfer":
                info = parsed.get("info", {})
                sender = info.get("source", "unknown")
                recipient = info.get("destination", "unknown")
                lamports = int(info.get("lamports", 0))
                sol = lamports / 1e9
                label = f"{sol:.9f} SOL {dt_str}"  # Include amount and time
                transactions.append((sender, recipient, label))

    return transactions

def estimate_credit_score(transactions):
    """
    Estimate a simplistic 'credit score' based on:
    - Wallet age
    - Number of transactions
    - Average transaction size
    """
    if not transactions:
        return 0

    timestamps = []
    amounts = []
    for _, _, label in transactions:
        try:
            parts = label.split()
            sol = float(parts[0])
            date_str = " ".join(parts[2:])
            timestamp = time.mktime(datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S").timetuple())
            amounts.append(sol)
            timestamps.append(timestamp)
        except:
            continue

    if not timestamps:
        return 0

    # Compute wallet age, transaction count, and average value
    wallet_age_days = (time.time() - min(timestamps)) / 86400
    tx_count = len(transactions)
    avg_tx_amount = sum(amounts) / len(amounts)

    # Normalize each component to a score between 0 and 1
    age_score = min(wallet_age_days / 365, 1.0)
    tx_score = min(tx_count / 100, 1.0)
    amount_score = min(avg_tx_amount / 2, 1.0)

    # Weighted average to get a final score (out of 1000)
    total_score = 0.4 * age_score + 0.3 * tx_score + 0.3 * amount_score
    return int(total_score * 1000)

def draw_node_info_panel(surface, node_name, transactions):
    """
    Draw a translucent popup on the top-left with details of a selected node.
    """
    panel_width = 380
    panel_height = 280
    margin = 20
    x = margin
    y = margin
    panel_rect = pygame.Rect(x, y, panel_width, panel_height)

    # Background with alpha transparency
    s = pygame.Surface((panel_width, panel_height), pygame.SRCALPHA)
    s.fill((20, 20, 40, 200))  # Dark semi-transparent background
    surface.blit(s, (x, y))

    # Outer border for panel
    pygame.draw.rect(surface, GLOW_COLOR, panel_rect, 2, border_radius=8)

    # Node address (truncated)
    title = font.render(f"Node: {node_name[:10]}...", True, (255, 255, 0))
    surface.blit(title, (x + 12, y + 12))

    # Display up to 9 transaction lines
    inner_y = y + 40
    max_items = 9
    for i, (direction, other_party, label) in enumerate(transactions[:max_items]):
        txt = f"{direction} {other_party[:6]}... — {label}"
        line = font.render(txt, True, (200, 255, 255))
        surface.blit(line, (x + 12, inner_y + i * 24))

def draw_glowing_circle(surface, color, center, radius):
    """
    Draw a soft glowing circle using multiple alpha layers.
    """
    for i in range(5, 0, -1):
        alpha = max(20, 255 // (i * 3))
        glow_surface = pygame.Surface((radius*4, radius*4), pygame.SRCALPHA)
        pygame.draw.circle(glow_surface, (*color, alpha), (radius*2, radius*2), radius + i*2)
        surface.blit(glow_surface, (center[0] - radius*2, center[1] - radius*2))
    pygame.draw.circle(surface, color, center, radius)

def draw_button(surface, font, rect, text, is_active):
    """
    Draw a rounded toggle button with optional highlight.
    """
    pygame.draw.rect(surface, (60, 60, 100), rect, border_radius=8)
    pygame.draw.rect(surface, (0, 255, 180) if is_active else (200, 200, 200), rect, 2, border_radius=8)
    label = font.render(text, True, (255, 255, 255))
    label_rect = label.get_rect(center=rect.center)
    surface.blit(label, label_rect)

def visualize_graph_pygame(transactions):
    """
    Main Pygame visualizer loop — render the transaction graph,
    handle clicks, zooming, dragging, and draw UI overlays.
    """
    global node_transactions, selected_node, selected_transactions, show_credit
    pygame.init()
    screen = pygame.display.set_mode((WIDTH, HEIGHT))
    pygame.display.set_caption("Solana Wallet Transaction Graph")
    clock = pygame.time.Clock()

    # Set global font (prefer monospace)
    font_path = pygame.font.match_font("consolas") or pygame.font.get_default_font()
    global font
    font = pygame.font.Font(font_path, 16)

    # Build graph using NetworkX
    G = nx.DiGraph()
    node_freq = {}

    for sender, recipient, label in transactions:
        G.add_edge(sender, recipient, label=label)
        node_freq[sender] = node_freq.get(sender, 0) + 1
        node_freq[recipient] = node_freq.get(recipient, 0) + 1
        node_transactions.setdefault(sender, []).append(("Sent to", recipient, label))
        node_transactions.setdefault(recipient, []).append(("Received from", sender, label))

    # Use spring layout to spread out nodes naturally
    pos = nx.spring_layout(G, k=1.5, iterations=150, seed=42)

    # Compute estimated credit score for panel
    credit_score = estimate_credit_score(transactions)

    # Zoom and pan state
    zoom = 1.0
    offset = [WIDTH // 2, HEIGHT // 2]

    # Convert node graph positions to screen positions
    def get_scaled_pos():
        return {
            node: (
                int(x * 200 * zoom + offset[0]),
                int(y * 200 * zoom + offset[1])
            ) for node, (x, y) in pos.items()
        }

    dragging = False
    drag_start = (0, 0)
    mouse_moved = False
    running = True

    while running:
        screen.fill(BG_COLOR)
        node_pos = get_scaled_pos()
        button_rect = pygame.Rect(WIDTH - 180, 20, 160, 40)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False

            # Start drag
            elif event.type == pygame.MOUSEBUTTONDOWN:
                if event.button == 1:
                    dragging = True
                    mouse_moved = False
                    drag_start = pygame.mouse.get_pos()

            # Stop drag + detect click
            elif event.type == pygame.MOUSEBUTTONUP:
                if event.button == 1:
                    dragging = False
                    if not mouse_moved:
                        mx, my = pygame.mouse.get_pos()
                        if button_rect.collidepoint(mx, my):
                            show_credit = not show_credit
                        else:
                            for node, (x, y) in node_pos.items():
                                if ((x - mx) ** 2 + (y - my) ** 2) ** 0.5 <= 15:
                                    selected_node = node
                                    selected_transactions = node_transactions.get(node, [])
                                    break
                elif event.button == 3:
                    # Right-click to deselect
                    selected_node = None
                    selected_transactions = []

            elif event.type == pygame.MOUSEMOTION and dragging:
                # Pan the screen
                dx, dy = event.rel
                if abs(dx) > 1 or abs(dy) > 1:
                    mouse_moved = True
                offset[0] += dx
                offset[1] += dy

            elif event.type == pygame.MOUSEWHEEL:
                # Zoom in/out around cursor
                old_zoom = zoom
                if event.y > 0:
                    zoom *= 1.1
                elif event.y < 0:
                    zoom /= 1.1
                zoom = max(0.1, min(zoom, 10))
                mx, my = pygame.mouse.get_pos()
                scale_change = zoom / old_zoom
                offset[0] = mx - scale_change * (mx - offset[0])
                offset[1] = my - scale_change * (my - offset[1])

        # Draw graph edges first (under nodes)
        for u, v in G.edges():
            pygame.draw.line(screen, EDGE_COLOR, node_pos[u], node_pos[v], 2)

        # Draw glowing nodes and their short labels
        for node, (x, y) in node_pos.items():
            draw_glowing_circle(screen, NODE_COLOR, (int(x), int(y)), 10)
            label = node[:4] + "..."
            text_surface = font.render(label, True, FONT_COLOR)
            screen.blit(text_surface, (x + 12, y - 10))

        # Display info panel if a node is selected
        if selected_node:
            draw_node_info_panel(screen, selected_node, selected_transactions)

        # Show toggle button and credit score if enabled
        draw_button(screen, font, button_rect, "Show Credit Score", show_credit)
        if show_credit:
            score_text = font.render(f"Credit Score: {credit_score}", True, (255, 255, 180))
            screen.blit(score_text, (WIDTH - 180, 70))

        pygame.display.flip()
        clock.tick(60)

    pygame.quit()

# Entry point of the script
if __name__ == "__main__":
    wallet = input("Enter Solana wallet address: ").strip()
    txs = fetch_transactions(wallet)
    if txs:
        visualize_graph_pygame(txs)
    else:
        print("No transactions found.")
